{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../services/regiao.service\";\nimport * as i3 from \"../../../services/cidade.service\";\nexport let RegiaoCadastroComponent = /*#__PURE__*/(() => {\n  class RegiaoCadastroComponent {\n    fb;\n    regiaoService;\n    cidadeService;\n    regiaoForm;\n    cidadesList = []; // Substitua any pelo tipo apropriado\n    constructor(fb, regiaoService, cidadeService // Injete o serviço de cidade\n    ) {\n      this.fb = fb;\n      this.regiaoService = regiaoService;\n      this.cidadeService = cidadeService;\n      this.regiaoForm = this.fb.group({\n        nome: ['', Validators.required],\n        cidades: this.fb.array([], Validators.required)\n      });\n    }\n    ngOnInit() {\n      this.carregarCidades();\n    }\n    carregarCidades() {\n      // Substitua com o método do CidadeService que retorna as cidades\n      this.cidadeService.getCidades().subscribe(data => this.cidadesList = data, error => console.error(error));\n    }\n    cidades() {\n      return this.regiaoForm.get('cidades');\n    }\n    novaCidade() {\n      return this.fb.group({\n        cidade: ['', Validators.required],\n        uf: ['', Validators.required]\n      });\n    }\n    adicionarCidade() {\n      this.cidades().push(this.novaCidade());\n    }\n    removerCidade(index) {\n      this.cidades().removeAt(index);\n    }\n    onSubmit() {\n      if (this.regiaoForm.valid) {\n        // Assume-se que uma nova região deve ser ativa por padrão, então 'ativo' é definido como true\n        const regiao = {\n          nome: this.regiaoForm.value.nome,\n          cidades: this.regiaoForm.value.cidades.map(c => c.cidade),\n          ativo: true // ou um valor dinâmico baseado no formulário, se houver essa opção\n        };\n        this.regiaoService.createRegiao(regiao).subscribe({\n          next: response => {\n            // Lida com a resposta de sucesso\n            console.log('Região criada:', response);\n            // Aqui você pode redirecionar para a lista de regiões ou limpar o formulário\n          },\n          error: error => {\n            console.error('Erro ao criar região:', error);\n          }\n        });\n      }\n    }\n    onCancel() {\n      // Implemente a ação de cancelar, como voltar para a página de listagem\n    }\n    static ɵfac = function RegiaoCadastroComponent_Factory(t) {\n      return new (t || RegiaoCadastroComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.RegiaoService), i0.ɵɵdirectiveInject(i3.CidadeService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegiaoCadastroComponent,\n      selectors: [[\"app-regiao-cadastro\"]],\n      decls: 0,\n      vars: 0,\n      template: function RegiaoCadastroComponent_Template(rf, ctx) {},\n      styles: [\".regiao-cadastro-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;padding:20px}.regiao-cadastro-container[_ngcontent-%COMP%]   .mat-form-field[_ngcontent-%COMP%]{width:100%}.regiao-cadastro-container[_ngcontent-%COMP%]   .actions[_ngcontent-%COMP%]{display:flex;justify-content:space-between;margin-top:20px}.regiao-cadastro-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-right:10px}\"]\n    });\n  }\n  return RegiaoCadastroComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}